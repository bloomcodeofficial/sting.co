{
  "version": 3,
  "sources": ["../../bin/live-reload.js", "../../src/utils/jobylon.ts"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener('change', () => location.reload());\n", "import { CMSCore, CMSList } from '@finsweet/attributes-cmscore';\nimport type { CMSFilters } from 'src/types/CMSFilters';\n\nwindow.fsAttributes = window.fsAttributes || [];\nwindow.fsAttributes.push([\n  'cmsload',\n  async (listInstances: CMSList[]) => {\n    // Get the list\n    const listInstance = listInstances[0];\n    if (!listInstance) return;\n    // console.log('Jobylon active!');\n\n    // Copy the template element\n    const item = listInstance.items[0];\n    const itemTemplateElement = item.element;\n\n    // Get external data\n    const fetchData = await fetchJobs();\n\n    // Clear template elements\n    listInstance.clearItems();\n\n    // Create items from template element\n    const jobs = fetchData.map((job) => newItem(job, itemTemplateElement));\n    if (!jobs) return;\n\n    // Add new items to list\n    listInstance.addItems(jobs);\n\n    window.fsAttributes.push([\n      'cmsfilter',\n      async (filterInstances: CMSFilters[]) => {\n        // Get the instances\n        const [filterInstance] = filterInstances;\n\n        // Get the template elements\n        const filterTemplateElement1 = filterInstance.form.querySelector(\n          '[data-element=\"experience-filter\"]'\n        )?.parentElement;\n\n        const filterTemplateElement2 = filterInstance.form.querySelector(\n          '[data-element=\"job-function-filter\"]'\n        )?.parentElement;\n\n        const filterTemplateElement3 = filterInstance.form.querySelector(\n          '[data-element=\"location-filter\"]'\n        ).parentElement;\n\n        // Get parent of template elements\n        const filter1WrapperElement = filterTemplateElement1?.parentElement;\n        const filter2WrapperElement = filterTemplateElement2?.parentElement;\n        const filter3WrapperElement = filterTemplateElement3?.parentElement;\n\n        // Remove the template element from each filter category\n        filterTemplateElement1?.remove();\n        filterTemplateElement2?.remove();\n        filterTemplateElement3?.remove();\n\n        // Collect unique categories of each category\n        const newItems1 = collectCategories(fetchData, 'experience');\n        const newItems2 = collectCategories(fetchData, 'function');\n        const newItems3 = collectLocations(fetchData);\n\n        // Create new filters for each category and append them in the parent wrapper\n        for (const category of newItems1) {\n          const newFilter = createFiler(category, filterTemplateElement1);\n          if (!newFilter) continue;\n\n          filter1WrapperElement?.append(newFilter);\n        }\n\n        for (const category of newItems2) {\n          const newFilter = createFiler(category, filterTemplateElement2);\n          if (!newFilter) continue;\n\n          filter2WrapperElement?.append(newFilter);\n        }\n\n        for (const category of newItems3) {\n          const newFilter = createFiler(category, filterTemplateElement3);\n          if (!newFilter) continue;\n\n          filter3WrapperElement?.append(newFilter);\n        }\n\n        // Sync CMSFilters instance to read the new filters data\n        filterInstance.storeFiltersData();\n      },\n    ]);\n  },\n]);\n\n// Fetches the jobs from Jobylon API\nconst fetchJobs = async () => {\n  try {\n    const response = await fetch(\n      'https://feed.jobylon.com/feeds/a23d1a2b-647c-4497-b36b-1555efaba88f/?format=json'\n    );\n    const jobs = await response.json();\n\n    return jobs;\n  } catch (error) {\n    return [];\n  }\n};\n\n// Create new items from template element\nconst newItem = (job, templateElement) => {\n  const newItem = templateElement.cloneNode(true);\n\n  // Query the internal elements of the Collection item\n  const logo = newItem.querySelector('[data-element=\"logo\"]');\n  const title = newItem.querySelector('[data-element=\"title\"]');\n  const company = newItem.querySelector('[data-element=\"company\"]');\n  // const location = newItem.querySelector('[data-element=\"location\"]');\n  const location = newItem.querySelector('[data-element=\"location\"]');\n  const experience = newItem.querySelector('[data-element=\"level\"]');\n  const jobType = newItem.querySelector('[data-element=\"type\"]');\n  const jobFunction = newItem.querySelector('[data-element=\"job-function\"]');\n  const link = newItem.querySelector('[data-element=\"link\"]');\n\n  const addLocations = () => {\n    const jobLocations = collectJobLocations(job);\n    const templ = location.parentElement;\n    const list = templ.parentElement;\n\n    templ.remove();\n\n    jobLocations.forEach((location) => {\n      const newLocation = templ.cloneNode(true);\n      const locationTxt = newLocation.querySelector('[data-element=\"location\"]');\n\n      if (locationTxt) locationTxt.textContent = location;\n\n      list.append(newLocation);\n    });\n  };\n\n  addLocations();\n\n  // Populate the internal items\n  if (logo) logo.src = job.company.logo;\n  if (title) title.textContent = job.title;\n  if (company) company.textContent = job.company.name;\n  // if (location) location.textContent = job.locations[0].location.city;\n  if (experience) experience.textContent = job.experience;\n  if (jobType) jobType.textContent = job.employment_type;\n  if (jobFunction) jobFunction.textContent = job.function;\n  if (link) link.href = job.urls.ad;\n\n  return newItem;\n};\n\n// Collect categories\nconst collectCategories = function (jobs, category) {\n  const categoryItems = new Set();\n\n  for (const job of jobs) {\n    categoryItems.add(job[category]);\n  }\n  return [...categoryItems];\n};\n\nconst collectLocations = function (jobs) {\n  const locationItems = new Set();\n\n  jobs.forEach((job) => {\n    job.locations.forEach((jobLocations) => {\n      if (jobLocations.location.city) {\n        locationItems.add(jobLocations.location.city);\n        return;\n      }\n      if (!jobLocations.location.city && jobLocations.location.text) {\n        locationItems.add(jobLocations.location.text);\n        return;\n      }\n    });\n  });\n\n  return [...locationItems];\n};\n\nconst collectJobLocations = function (job) {\n  const string = new Set();\n  job.locations.forEach((jobLocations) => {\n    if (jobLocations.location.city) {\n      string.add(jobLocations.location.city);\n    } else if (jobLocations.location.text) {\n      string.add(jobLocations.location.text);\n    }\n  });\n\n  return [...string];\n};\n\n// Creates a new checkbox filter from template and external data\nconst createFiler = (category, templateElement) => {\n  // Clone the template element\n  const newFilter = templateElement.cloneNode(true);\n\n  // Query the inner elements\n  const label = newFilter.querySelector('span');\n  const input = newFilter.querySelector('input');\n\n  if (!label || !input) return;\n\n  // Populate the inner elements\n  label.textContent = category;\n  input.value = category;\n\n  return newFilter;\n};\n"],
  "mappings": "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",
  "names": ["newItem", "location"]
}
